setopt autocd
zle_highlight=('paste:none')

source ~/.profile
setopt HIST_IGNORE_SPACE

# node path
export PATH="$PATH:$HOME/.nvm/versions/node/v20.10.0/bin"

# go bin
export PATH=$PATH:$HOME/go/bin

# for flutter
export CHROME_EXECUTABLE=chromium
export PATH=$PATH:$HOME/.local/bin/flutter/bin

#        === autocomplete ===

autoload -Uz compinit promptinit
compinit
promptinit
_comp_options+=(globdots) # show hidden files
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zmodload zsh/complist


#        === editor ===

EDITOR=nvim
export VISUAL=nvim
export PATH="$PATH:/home/adiantum/.local/bin"
export PATH="$PATH:/opt/gradle/gradle-8.4/bin"
export MANPAGER='nvim +Man!' # man pages in nvim

#        === Prompt ===
setopt autocd

PROMPT="%(?.%F{cyan}[èŒ¶é›¨].%F{cyan}[%F{red}èŒ¶é›¨%F{cyan}]) %F{green}%n:%F{cyan}%1~%f%# "
PS2="%{[0;1;95m%}> %{[0m%}"

# Set cursor to vertical before each promt (To avoid programs changing the cursor)
precmd() { print -Pn "\e[6 q" }

#        === Right prompt ===

function git_branch_name()
{
  branch=$(git symbolic-ref HEAD 2> /dev/null | awk 'BEGIN{FS="/"} {print $NF}')
  if [[ $branch == "" ]];
  then
    :
  else
    echo '%F{green}îœ¥%f '$branch''
  fi
}
setopt prompt_subst
RPROMPT='$(git_branch_name)'

# change prompt if in a nix shell
if [ -n "$IN_NIX_SHELL" ]; then
  export PS1="%F{blue}ïŒ“ $PS1"
fi
alias nsz="nix-shell --command 'zsh'"


#        === History ===

HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.config/zsh/history/zshhistory


#        === keybind ===


# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -v '^?' backward-delete-char


bindkey -e  # set emacs key

# Edit line in vim with ctrl-v:
autoload edit-command-line; zle -N edit-command-line
bindkey '^v' edit-command-line


#        === Alias ===

# working temp aliases
alias bts="cd ~/Documents/bts/"
alias pof="cd ~/programming/project/portfolio/"
alias sail='sh $([ -f sail ] && echo sail || echo vendor/bin/sail)'
alias spa='sail php artisan'

# my aliases
alias python="python3"
alias py="python3"
alias r="ranger"
alias ztr="zathura"
alias tm="tmux"
alias tma="tmux a"
alias lzg="lazygit"
alias sx="startx"

# nvim
alias v="nvim"
alias nvc="cd ~/.config/nvim"
alias nvcw="cd ~/.config/nvim/vimwiki/docs"
alias nvi="chezmoi edit ~/.config/nvim/init.lua"
# alias nvp="cd ~/.config/nvim/plugged"
alias wiki="nvim ~/.config/nvim/vimwiki/docs/index.md"

# Kitty
alias icat="kitty +kitten icat"
alias kt.='nohup kitty --directory "$(pwd)" >/dev/null 2>&1 & disown'
alias ktc="cd ~/.config/kitty"
alias kti="chezmoi edit ~/.config/kitty/kitty.conf"

# qtile
alias qtc="cd ~/.config/qtile"
alias qti="chezmoi edit ~/.config/qtile/config.py"
alias qtr="pkill -SIGUSR1 qtile"

# chezmoi
alias cmd="chezmoi cd"
alias cme="chezmoi edit"
alias cma="chezmoi -v apply"

# git aliases
alias gs="git status"
alias ga="git add"
alias ga.="git add ."
alias gcm="git commit -m "
alias gp="git push"
alias gd="git diff"
alias gg="git log --all --graph --decorate --oneline"
alias gc="git checkout"
alias gcb="git checkout -b"

# bashrc
alias bsi="chezmoi edit ~/.bashrc"
alias bss="source ~/.bashrc"

# zshrc
alias zsi="chezmoi edit ~/.zshrc"
alias zss="source ~/.zshrc"

alias ipadress="echo \$(ip addr show | awk '/inet.*brd/{print \$2}' | sed 's|/.*||')"
alias cddl="cd ~/Downloads"
alias ..="cd .."
alias cd..="cd .."

# security
alias mv="mv -i" # ask if override
alias rm="rm -i"
alias cp="cp -i"

alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# ls aliases
alias l='exa -l --icons'
alias la='exa -la --icons'
alias ll='ls -CF'
alias tree='exa -T --icons'
export EXA_COLORS="da=30:uu=0:fi=1;35:di=34"

alias npmt="npm test"

alias pacman="sudo pacman -S"

alias battery="~/battery_level.sh"

alias feh="feh --scale-down -B 'black' -z --action 'feh --bg-scale %f' "

# apt
alias aptup="sudo apt update && sudo apt upgrade"
alias aptin="sudo apt install"
alias aptrm="sudo apt remove"

alias mkdir="mkdir -pv"

alias clip="xclip -selection c"

# docker

alias dcu="docker-compose up -d"
alias dcd="docker-compose down"
alias dcp="docker-compose ps"

alias pandock='docker run --rm -v "$(pwd):/data" -u $(id -u):$(id -g) pandoc/extra' # docker pour utiliser pandoc

#        === fzf ===

eval "$(fzf --zsh)"
export FZF_DEFAULT_COMMAND="fd --hidden --strip-cwd-prefix --exclude .git"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git"


# Use fd to generate the list for file and directory completion
_fzf_compgen_path() {
  fd --hidden --exclude .git . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type=d --hidden --exclude .git . "$1"
}

# --- setup fzf theme ---
export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS'
 --color=fg:#a89984,bg:#1d2021,hl:#89b482
 --color=fg+:#cfcfcf,bg+:#1d2021,hl+:#7daea3
 --color=info:#89b482,prompt:#89b482,pointer:#e78a4e
 --color=marker:#89b482,spinner:#89b482,header:#87afaf'

# search directory and cd into it, search in ~
fzc() {
  local dir
  dir=$(fd --search-path $HOME --hidden --exclude .git --type d | fzf)

  if [ -n "$dir" ]; then
    cd "$dir"; l
  fi
}
alias f="fzc"

# search directory and cd into it, search in current dir
fz.() {
  local dir
  dir=$(fd --type d --hidden --exclude .git | fzf)

  if [ -n "$dir" ]; then
    cd "$dir"
  fi
}
alias f.="fz."


# search directory and open it in nvim, search in current dir
fzv() {
  local file
  file=$(fd --search-path $HOME --type f --hidden --exclude .git | fzf)

  if [ -n "$file" ]; then
    nvim "$file"
  fi
}
alias fv="fzv"

# search directory and open it in nvim, search in current dir
fzp() {
  local file
  file=$(fd --search-path $HOME --type f .pdf --exclude .git | fzf)

  if [ -n "$file" ]; then
    sioyek "$file"
  fi
}
alias fp="fzp"

# start x automatically if on tty1
if [ "$(tty)" = "/dev/tty1" ]; then
    startx
fi

# toggle ctrl-z
ctrlz () {
  if [[ $#BUFFER -eq 0 ]]; then
    fg
    zle redisplay
  else
    zle push-input
  fi
}
zle -N ctrlz
bindkey '^Z' ctrlz

export BAT_THEME="ansi"

eval "$(zoxide init zsh)"

#        === keybind ===

# Move backward a word with Alt+n
bindkey '\en' emacs-backward-word

#        === plugin ===

# History substring keybind
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND="bg=none,fg=cyan"
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND="bg=none,fg=red"

source ~/.config/zsh/plug/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/.config/zsh/plug/zsh-history-substring-search/zsh-history-substring-search.zsh
source ~/.config/zsh/plug/zsh-autosuggestions/zsh-autosuggestions.zsh
# source ~/.config/zsh/plug/zsh-sudo/sudo.zsh


bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
bindkey '^j' autosuggest-execute

# eval "$(starship init zsh)"

. "$HOME/.atuin/bin/env"

eval "$(atuin init zsh)"
